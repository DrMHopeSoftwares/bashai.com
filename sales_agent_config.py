#!/usr/bin/env python3
"""
Sales Agent Configuration for Bolna AI
Complete configuration for creating a Hindi/English sales voice agent
"""

import os
import json
from bolna_integration import BolnaAPI
from dotenv import load_dotenv

load_dotenv()

# Sales Agent Configuration
SALES_AGENT_CONFIG = {
    "agent_name": "Sales Expert - ‡§∞‡§æ‡§ú",
    "agent_welcome_message": "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§∞‡§æ‡§ú ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ sales assistant‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
    "webhook_url": None,  # Add your webhook URL if needed
    "agent_type": "sales",
    "tasks": [
        {
            "task_type": "conversation",
            "tools_config": {
                "llm_agent": {
                    "agent_type": "simple_llm_agent",
                    "agent_flow_type": "streaming",
                    "routes": {
                        "embedding_model": "snowflake/snowflake-arctic-embed-m",
                        "routes": [
                            {
                                "route_name": "price_objection",
                                "utterances": [
                                    "‡§Ø‡§π ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§Ç‡§ó‡§æ ‡§π‡•à",
                                    "This is too expensive",
                                    "Price is high",
                                    "‡§ï‡•Ä‡§Æ‡§§ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§π‡•à"
                                ],
                                "response": "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø price ‡§è‡§ï concern ‡§π‡•à‡•§ ‡§≤‡•á‡§ï‡§ø‡§® ‡§π‡§Æ‡§æ‡§∞‡•á product ‡§ï‡•Ä quality ‡§î‡§∞ value ‡§ï‡•ã ‡§¶‡•á‡§ñ‡§§‡•á ‡§π‡•Å‡§è, ‡§Ø‡§π actually ‡§¨‡§π‡•Å‡§§ reasonable ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•Å‡§õ special offers ‡§¨‡§§‡§æ ‡§∏‡§ï‡•Ç‡§Ç?",
                                "score_threshold": 0.8
                            },
                            {
                                "route_name": "competitor_comparison",
                                "utterances": [
                                    "Other companies are cheaper",
                                    "‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§∏‡§∏‡•ç‡§§‡•Ä ‡§π‡•à",
                                    "Competition ‡§Æ‡•á‡§Ç better options ‡§π‡•à‡§Ç"
                                ],
                                "response": "‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§∏‡§π‡•Ä ‡§ï‡§π ‡§∞‡§π‡•á ‡§π‡•à‡§Ç! Market ‡§Æ‡•á‡§Ç options ‡§π‡•à‡§Ç‡•§ ‡§≤‡•á‡§ï‡§ø‡§® ‡§π‡§Æ‡§æ‡§∞‡•Ä USP ‡§π‡•à quality, after-sales service ‡§î‡§∞ guarantee‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§π‡§Æ‡§æ‡§∞‡•á unique benefits explain ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Ç?",
                                "score_threshold": 0.8
                            },
                            {
                                "route_name": "not_interested",
                                "utterances": [
                                    "‡§Æ‡•Å‡§ù‡•á interest ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à",
                                    "Not interested",
                                    "Don't need this",
                                    "‡§Ö‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§æ‡§π‡§ø‡§è"
                                ],
                                "response": "‡§ï‡•ã‡§à ‡§¨‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç! ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ 2 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§¨‡§§‡§æ ‡§∏‡§ï‡•Ç‡§Ç ‡§ï‡§ø ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•à‡§∏‡•á beneficial ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à? ‡§´‡§ø‡§∞ ‡§Ü‡§™ decide ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
                                "score_threshold": 0.8
                            }
                        ]
                    },
                    "llm_config": {
                        "agent_flow_type": "streaming",
                        "provider": "openai",
                        "family": "openai",
                        "model": "gpt-4",
                        "summarization_details": None,
                        "extraction_details": None,
                        "max_tokens": 200,
                        "presence_penalty": 0.1,
                        "frequency_penalty": 0.1,
                        "base_url": "https://api.openai.com/v1",
                        "top_p": 0.9,
                        "min_p": 0.1,
                        "top_k": 0,
                        "temperature": 0.7,
                        "request_json": True
                    }
                },
                "synthesizer": {
                    "provider": "polly",
                    "provider_config": {
                        "voice": "Aditi",  # Hindi female voice
                        "engine": "neural",
                        "sampling_rate": "8000",
                        "language": "hi-IN"
                    },
                    "stream": True,
                    "buffer_size": 150,
                    "audio_format": "wav"
                },
                "transcriber": {
                    "provider": "deepgram",
                    "model": "nova-2",
                    "language": "hi",  # Hindi language
                    "stream": True,
                    "sampling_rate": 16000,
                    "encoding": "linear16",
                    "endpointing": 100
                },
                "input": {
                    "provider": "twilio",
                    "format": "wav"
                },
                "output": {
                    "provider": "twilio",
                    "format": "wav"
                },
                "api_tools": None
            },
            "toolchain": {
                "execution": "parallel",
                "pipelines": [
                    [
                        "transcriber",
                        "llm",
                        "synthesizer"
                    ]
                ]
            },
            "task_config": {
                "hangup_after_silence": 15,  # 15 seconds silence
                "incremental_delay": 300,
                "number_of_words_for_interruption": 3,
                "hangup_after_LLMCall": False,
                "call_cancellation_prompt": "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§∂‡•Å‡§≠ ‡§π‡•ã‡•§ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á!",
                "backchanneling": True,
                "backchanneling_message_gap": 4,
                "backchanneling_start_delay": 3,
                "ambient_noise": False,
                "ambient_noise_track": "office-ambience",
                "call_terminate": 180,  # 3 minutes max call
                "voicemail": True,
                "inbound_limit": -1,
                "whitelist_phone_numbers": [
                    "<any>"
                ],
                "disallow_unknown_numbers": False
            }
        }
    ]
}

# Sales Agent Prompts
SALES_AGENT_PROMPTS = {
    "task_1": {
        "system_prompt": """‡§Ü‡§™ ‡§è‡§ï expert sales representative ‡§π‡•à‡§Ç ‡§ú‡§ø‡§∏‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§∞‡§æ‡§ú ‡§π‡•à‡•§ ‡§Ü‡§™ Hindi ‡§î‡§∞ English ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç fluent ‡§π‡•à‡§Ç‡•§

‡§Ü‡§™‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø goal ‡§π‡•à:
1. Customer ‡§ï‡•á ‡§∏‡§æ‡§• friendly relationship ‡§¨‡§®‡§æ‡§®‡§æ
2. Product/service ‡§ï‡•Ä benefits explain ‡§ï‡§∞‡§®‡§æ
3. Objections ‡§ï‡•ã handle ‡§ï‡§∞‡§®‡§æ
4. Sale close ‡§ï‡§∞‡§®‡§æ ‡§Ø‡§æ follow-up schedule ‡§ï‡§∞‡§®‡§æ

‡§Ü‡§™‡§ï‡•Ä personality:
- Confident ‡§≤‡•á‡§ï‡§ø‡§® humble
- Customer-focused approach
- Problem solver mindset
- Persistent ‡§≤‡•á‡§ï‡§ø‡§® respectful

Sales Techniques:
- AIDA (Attention, Interest, Desire, Action) approach use ‡§ï‡§∞‡•á‡§Ç
- Customer ‡§ï‡•Ä needs ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡•á‡§Ç
- Benefits ‡§ï‡•ã features ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ highlight ‡§ï‡§∞‡•á‡§Ç
- Social proof ‡§î‡§∞ testimonials ‡§ï‡§æ use ‡§ï‡§∞‡•á‡§Ç
- Urgency create ‡§ï‡§∞‡•á‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® pressure ‡§® ‡§°‡§æ‡§≤‡•á‡§Ç

Language Guidelines:
- Hindi-English mix (Hinglish) naturally use ‡§ï‡§∞‡•á‡§Ç
- Customer ‡§ï‡•Ä language preference ‡§ï‡•ã follow ‡§ï‡§∞‡•á‡§Ç
- Technical terms ‡§ï‡•ã simple language ‡§Æ‡•á‡§Ç explain ‡§ï‡§∞‡•á‡§Ç
- Respectful tone maintain ‡§ï‡§∞‡•á‡§Ç

Call Structure:
1. Warm greeting ‡§î‡§∞ introduction
2. Customer ‡§ï‡•Ä current situation ‡§ú‡§æ‡§®‡•á‡§Ç
3. Product benefits present ‡§ï‡§∞‡•á‡§Ç
4. Objections handle ‡§ï‡§∞‡•á‡§Ç
5. Closing attempt ‡§ï‡§∞‡•á‡§Ç
6. Next steps decide ‡§ï‡§∞‡•á‡§Ç

Remember: ‡§π‡§Æ‡•á‡§∂‡§æ customer ‡§ï‡•Ä value ‡§ï‡•ã priority ‡§¶‡•á‡§Ç, sales ‡§ï‡•ã ‡§®‡§π‡•Ä‡§Ç‡•§"""
    }
}

def create_sales_agent():
    """Create a sales agent using Bolna API"""
    
    print("üéØ Creating Sales Agent Configuration")
    print("="*50)
    
    try:
        # Initialize Bolna API
        bolna_api = BolnaAPI()
        
        # Create the agent
        print("üîÑ Creating sales agent...")
        
        agent_data = {
            "agent_config": SALES_AGENT_CONFIG,
            "agent_prompts": SALES_AGENT_PROMPTS
        }
        
        response = bolna_api._make_request('POST', '/v2/agent', agent_data)
        
        print("‚úÖ Sales Agent Created Successfully!")
        print(f"üéâ Agent ID: {response.get('agent_id')}")
        print(f"üìä Status: {response.get('status')}")
        
        # Save agent ID for future use
        agent_id = response.get('agent_id')
        if agent_id:
            print(f"\nüíæ Saving agent ID to environment...")
            with open('.env', 'a') as f:
                f.write(f"\nSALES_AGENT_ID={agent_id}\n")
            print(f"‚úÖ Agent ID saved to .env file")
        
        return response
        
    except Exception as e:
        print(f"‚ùå Failed to create sales agent: {e}")
        return None

def test_sales_agent_config():
    """Test the sales agent configuration"""
    
    print("\nüß™ Testing Sales Agent Configuration")
    print("="*40)
    
    # Validate configuration structure
    required_fields = ['agent_name', 'agent_welcome_message', 'tasks']
    
    for field in required_fields:
        if field in SALES_AGENT_CONFIG:
            print(f"‚úÖ {field}: Present")
        else:
            print(f"‚ùå {field}: Missing")
    
    # Check task configuration
    if SALES_AGENT_CONFIG.get('tasks'):
        task = SALES_AGENT_CONFIG['tasks'][0]
        print(f"‚úÖ Task type: {task.get('task_type')}")
        print(f"‚úÖ Tools configured: {len(task.get('tools_config', {}))}")
        print(f"‚úÖ Routes configured: {len(task.get('tools_config', {}).get('llm_agent', {}).get('routes', {}).get('routes', []))}")
    
    print(f"\nüìã Agent Summary:")
    print(f"   Name: {SALES_AGENT_CONFIG['agent_name']}")
    print(f"   Type: {SALES_AGENT_CONFIG['agent_type']}")
    print(f"   Voice: {SALES_AGENT_CONFIG['tasks'][0]['tools_config']['synthesizer']['provider_config']['voice']}")
    print(f"   Language: {SALES_AGENT_CONFIG['tasks'][0]['tools_config']['transcriber']['language']}")
    print(f"   Max Call Duration: {SALES_AGENT_CONFIG['tasks'][0]['task_config']['call_terminate']} seconds")

if __name__ == "__main__":
    # Test configuration first
    test_sales_agent_config()
    
    # Ask user if they want to create the agent
    create = input("\nü§î Do you want to create this sales agent? (y/n): ").lower().strip()
    
    if create == 'y':
        result = create_sales_agent()
        if result:
            print(f"\nüöÄ Next Steps:")
            print(f"1. Go to your phone numbers dashboard")
            print(f"2. Assign agent ID {result.get('agent_id')} to a phone number")
            print(f"3. Start making sales calls!")
    else:
        print("üëç Configuration ready. Run this script again when you want to create the agent.")
